"""update_fee_detail_and_inventory_models

Revision ID: 0721a7821927
Revises: 2e6a9ff7ebc8
Create Date: 2025-10-28 11:55:06.176223

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0721a7821927'
down_revision: Union[str, Sequence[str], None] = '2e6a9ff7ebc8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add new columns to fee_management_details
    op.add_column('fee_management_details', sa.Column('school_id', sa.UUID(), nullable=True))
    op.add_column('fee_management_details', sa.Column('fee_id', sa.UUID(), nullable=True))
    op.add_column('fee_management_details', sa.Column('amount', sa.Float(), nullable=True))
    op.add_column('fee_management_details', sa.Column('invoice_img', sa.String(length=500), nullable=True))
    
    # Update existing records with default values (you may need to adjust these)
    op.execute("UPDATE fee_management_details SET school_id = '00000000-0000-0000-0000-000000000000' WHERE school_id IS NULL")
    op.execute("UPDATE fee_management_details SET fee_id = '00000000-0000-0000-0000-000000000000' WHERE fee_id IS NULL")
    op.execute("UPDATE fee_management_details SET amount = 0.0 WHERE amount IS NULL")
    
    # Make columns NOT NULL
    op.alter_column('fee_management_details', 'school_id', nullable=False)
    op.alter_column('fee_management_details', 'fee_id', nullable=False)
    op.alter_column('fee_management_details', 'amount', nullable=False)
    
    # Change status column type and make it NOT NULL
    op.execute("UPDATE fee_management_details SET status = '1' WHERE status IS NULL")
    op.alter_column('fee_management_details', 'status',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=50),
               nullable=False)
    
    # Update indexes
    op.drop_index(op.f('idx_fee_detail_term'), table_name='fee_management_details')
    op.create_index('idx_fee_detail_status', 'fee_management_details', ['status'], unique=False)
    
    # Update foreign keys
    op.drop_constraint(op.f('fee_management_details_std_id_fkey'), 'fee_management_details', type_='foreignkey')
    op.drop_constraint(op.f('fee_management_details_academic_id_fkey'), 'fee_management_details', type_='foreignkey')
    op.drop_constraint(op.f('fee_management_details_fee_type_id_fkey'), 'fee_management_details', type_='foreignkey')
    op.create_foreign_key(None, 'fee_management_details', 'schools', ['school_id'], ['school_id'])
    op.create_foreign_key(None, 'fee_management_details', 'fee_management', ['fee_id'], ['fee_id'])
    
    # Drop old columns
    op.drop_column('fee_management_details', 'std_id')
    op.drop_column('fee_management_details', 'fee_type_id')
    op.drop_column('fee_management_details', 'academic_id')
    op.drop_column('fee_management_details', 'term')
    
    # Add school_id to inventory_management
    op.add_column('inventory_management', sa.Column('school_id', sa.UUID(), nullable=True))
    op.execute("UPDATE inventory_management SET school_id = '00000000-0000-0000-0000-000000000000' WHERE school_id IS NULL")
    op.alter_column('inventory_management', 'school_id', nullable=False)
    op.create_foreign_key(None, 'inventory_management', 'schools', ['school_id'], ['school_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'inventory_management', type_='foreignkey')
    op.drop_column('inventory_management', 'school_id')
    op.add_column('fee_management_details', sa.Column('term', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('fee_management_details', sa.Column('academic_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('fee_management_details', sa.Column('fee_type_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('fee_management_details', sa.Column('std_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'fee_management_details', type_='foreignkey')
    op.drop_constraint(None, 'fee_management_details', type_='foreignkey')
    op.create_foreign_key(op.f('fee_management_details_fee_type_id_fkey'), 'fee_management_details', 'fee_types', ['fee_type_id'], ['fee_type_id'])
    op.create_foreign_key(op.f('fee_management_details_academic_id_fkey'), 'fee_management_details', 'academic_years', ['academic_id'], ['academic_id'])
    op.create_foreign_key(op.f('fee_management_details_std_id_fkey'), 'fee_management_details', 'students', ['std_id'], ['std_id'])
    op.drop_index('idx_fee_detail_status', table_name='fee_management_details')
    op.create_index(op.f('idx_fee_detail_term'), 'fee_management_details', ['term'], unique=False)
    op.alter_column('fee_management_details', 'status',
               existing_type=sa.String(length=50),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('fee_management_details', 'invoice_img')
    op.drop_column('fee_management_details', 'amount')
    op.drop_column('fee_management_details', 'fee_id')
    op.drop_column('fee_management_details', 'school_id')
    # ### end Alembic commands ###
